1º- Creo el directorio /src.
2º- creo el paquete .json => npm init -y
3º- Instalamos las siguientes dependencias:
	- Express
	- Express-fileupload => Subida de archivos
	- Express-session => Manejo de sesiones
	- Cookie-parser => Para administrar las Cookies del navegador (para ver si esta logeado o no)
	- Body-parser => Procesar informacion que nos llega desde el servidor
	- Connect-flash => Para mandar mensajes que se almacenan en el navegador, cuando el usuario ha cometido algun error al logearse...
	- Bcrypt-nodejs => Cifrado de datos
	- Multer => Multer nos ayuda a gestionar el formato del fichero de nuestro server.
	- Path => Gestion de rutas del proyecto
	- Morgan => Administrar las peticiones http.
	- fs => Gestion de ficheros
	- mongoose => Modulo para conectarnos a MongoDB
	- passport => Atuenticarte con cuentas de google/facebook/twitter, etc
	- passport-local
	- ejs
	- method-override => Peticiones PUT
	- mkdirp => Para crear directorios
	- pm2@latest => Manejo de demonios/procesos del servidor.
	//// DEPENDENCIAS DE DESARROLLO:
	- dotenv => Para poder utilizar variables de entorno
	- npm-check-updates => Busca nuevas actualizaciones de los modulos instalados

	=> npm i -S express express-fileupload express-session cookie-parser connect-flash bcrypt-nodejs multer path morgan fs mime-types mongoose passport body-parser passport-local ejs require-optional method-override mkdirp pm2@latest -g
	=> npm i dotenv npm-check-updates -D

4º- Creamos una carpeta /upload que es donde se va a guardar el contenido que queramos subir.
	=> mkdir upload
5º- Creamos un archivo server.js
6º- Modificamos el package.json, donde pone "main" y lo cambiamos a server.js en vez de index.js
7º- Programamos el server.js y procedemos a ejecutarlo => nodemon server.js
8º- Instalamos postman para probar la api.

10º Pequeño resumen del workspace:
	- server.js se encarga de ejecutar a traves de express, todo lo que se encuentra
		en la carpeta public. (lo envia a nuestro cliente). Tiene tambien la logica principal de gestion
		de archivos.
	- El archivo routes.js gestiona el redireccionamiento de los directorios durante el loggeo del usuario
	- El archivo user.js dentro de /models contiene el esquema del usuario con el formato con el que se conectara
		y loggeara con la base de datos de mongoose, ademas de cifrar sus credenciales.
	- En la carpeta /config se guarda el archivo passport.js que es el encargado de crear y guardar el usuario
		en la base de datos mongodb.
	- En la carpeta /public tendremos todos los archivos css e imagenes estaticas que se llaman
		en nuestros .ejs.
	- En la carpeta /views tendremos todas nuestras vistas html.

9º- Sincronizando repo heroku con repo github

10º- Instalar PM2 para administrar procesos de la aplicacion.permite implementar demonios
	en aplicaciones para que puedan funcionar en segundo plano como servicios.

11º- Para ejecutar MongoDB
	- Desde terminal, ejecutar este comando: sudo systemctl enable --now mongod
	- Para comprobar el estado del cliente MongoDB: systemctl status mongod
	- Detener el servidor MongoDB: sudo systemctl stop mongodb
	- Para iniciar el servidor cuando éste está detenido: sudo systemctl start mongodb
	- Reiniciar el servidor: sudo systemctl restart mongodb
	- Para habilitar el servidor: sudo systemctl enable mongodb
	- Para ejecutar el servicio de mongodb: mongo
11º- Para eliminar contenedores e imagenes que no se estan utilizando:
	- docker system prune -a
12º- Comandos mongodb: https://geekflare.com/es/mongodb-queries-examples/
	- Conectar bbdd a atlas: https://studio3t.com/knowledge-base/articles/mongodb-atlas-login-ip-whitelisting/#connecting-from-a-different-physical-location
	- Mostrar bases de datos: show dbs;
	- Ver datos de la base de datos:
		- use nombre_base_de_datos;
		- Mostrar colecciones: show collections;
		- Mostrar datos de la coleccion: db.nombre_de_la_coleccion.find().pretty();
13º- Entorno de produccion:
	- https://www.youtube.com/watch?v=dr-vDIOw2As => Heroku con mongodb
	- https://www.youtube.com/watch?v=A7CJd7q4yeM => Variables de entorno.

14º- Operaciones CRUD: https://www.youtube.com/playlist?list=PLo5lAe9kQrwqUEXK7oQbzv63KsdODzuAy








15º- De cara al desarrollo, he creado un script en el package.json para poder ejecutar en desarrollo la aplicacion
	con el comando npm run dev.
16º- Creamos el archivo .env para alojar nuestras variables de entorno.
	Vamos a proceder a crear un buen nivel de abstraccion en cuanto a la configuracion de la base de datos mediante variables
	de entorno.

	Asignamos una nueva variable host en el servidor con valor 0.0.0.0. Ponemos este valor porque cuando el servidor se lance
	en produccion a Heroku, el propio heroku reconoce que esa url no existe y asignara una por defecto.